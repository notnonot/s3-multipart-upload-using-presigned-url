/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
import software.amazon.awssdk.http.SdkHttpMethod;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Configuration;
import software.amazon.awssdk.services.s3.model.CompleteMultipartUploadRequest;
import software.amazon.awssdk.services.s3.model.CompletedMultipartUpload;
import software.amazon.awssdk.services.s3.model.CompletedPart;
import software.amazon.awssdk.services.s3.model.CreateMultipartUploadRequest;
import software.amazon.awssdk.services.s3.model.UploadPartRequest;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import software.amazon.awssdk.services.s3.presigner.model.CompleteMultipartUploadPresignRequest;
import software.amazon.awssdk.services.s3.presigner.model.CreateMultipartUploadPresignRequest;
import software.amazon.awssdk.services.s3.presigner.model.PresignedCompleteMultipartUploadRequest;
import software.amazon.awssdk.services.s3.presigner.model.PresignedCreateMultipartUploadRequest;
import software.amazon.awssdk.services.s3.presigner.model.PresignedUploadPartRequest;
import software.amazon.awssdk.services.s3.presigner.model.UploadPartPresignRequest;
import software.amazon.awssdk.utils.IoUtils;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class App {

    private final XmlMapper xmlMapper = new XmlMapper();

    public static void main(String[] args) throws IOException, XMLStreamException {
        
        new App().test();

    }

    private void test() throws IOException, XMLStreamException {
        // FEEL THE INFORMATION HERE
        final Region region = Region.AP_NORTHEAST_1;
        final String bucket = "mileawsbucket";
        final String key = "config.json";


        this.putObjectMPU(region, bucket, key);
    }

    private void putObjectMPU(final Region region,  final String bucket, final String key) throws IOException, XMLStreamException {
        

        // 创建S3Presigner, 用于生成3种预签名URL. 分别需要服务端和客户端两方进行操作。客户端请求预签名分段上传URL时需要告诉服务端分段的总个数（或者文件大小以及每个分段大小）。

        // 服务端操作(需要AWS权限，如Access Key，Secret Key或者角色)。
        // 1. 服务端生成 CreateMultipartUpload API的预签名URL, 并访问该URL，获得uploadId。此为第一种URL。

        // 2. 服务端根据文件大小进行分段，服务端可以跟客户端协商一个分段大小，如以5MB为段长度，那么需要分段的大小就等于 文件大小/5MB(向上取整), 
        //    服务端根据uploadId和各个partNumber生成对应各个partNumber的 UploadPart API的预签名URL，此为第二种URL(包含多个URL)。

        // 3. 服务端生成 CompleteMultipartUpload API的预签名url，此为第三种URL。

        // 4. 服务端发送所有 UploadPart API预签名URL，CompleteMultipartUpload API预签名URL给客户端。

        // 客户端操作
        // 1. 客户段收到多个 UploadPart API预签名URL，分别请求每个UploadPart API 预签名URL以上传对应的分段文件内容。各个UploadPart URL在有效期内可以使用多次。
        //    每次请求 UploadPart API预签名URL，都会获得该Part的Etag，需要保留该字段。

        // 2. 客户端请求 CompleteMultipartUpload API的预签名url，请求的内容为XML，包含各个part number Index 和 Etag。以完成文件分段上传。


        // 本样例未区分客户端和服务端，只使用了一个分段，并且使用机器上aws cli配置的默认凭据。

        final S3Presigner s3Presigner = S3Presigner.builder()
                .region(region)
                .build();

        // Create MPU
        System.out.printf("CreateMultipartUploadRequest: bucket=%s key=%s%n", bucket, key);
        final CreateMultipartUploadRequest createMultipartUploadRequest = CreateMultipartUploadRequest.builder()
                .bucket(bucket)
                .key(key)
                .build();

        final CreateMultipartUploadPresignRequest createMultipartUploadPresignRequest = CreateMultipartUploadPresignRequest.builder()
                .signatureDuration(Duration.ofHours(1))
                .createMultipartUploadRequest(createMultipartUploadRequest)
                .build();

        final PresignedCreateMultipartUploadRequest presignedCreateMultipartUploadRequest = s3Presigner.presignCreateMultipartUpload(createMultipartUploadPresignRequest);
        final URL presignedCreateMultipartUploadRequestURL = presignedCreateMultipartUploadRequest.url();
        System.out.println("Create MPU URL: " + presignedCreateMultipartUploadRequestURL);

        final HttpURLResponse presignedCreateMultipartUploadRequestResponse = this.makeRequest(SdkHttpMethod.POST, presignedCreateMultipartUploadRequestURL, "application/octet-stream", null);
        final JsonNode presignedCreateMultipartUploadRequestResponseXml = this.fromXml(presignedCreateMultipartUploadRequestResponse.getBody());
        final String multipartUploadId = presignedCreateMultipartUploadRequestResponseXml.get("UploadId").asText();

        System.out.println("MPU ID: " + multipartUploadId);
        // -->

        // MPU Part
        final int partNumber = 1;
        final String partContent = "AAA" + this.createLongString(1024 * 1024 * 5);
        final byte[] partContentBytes = partContent.getBytes(StandardCharsets.UTF_8);

        System.out.printf("UploadPartRequest #%d: bucket=%s key=%s upload-id=%s%n", partNumber, bucket, key, multipartUploadId);

        final UploadPartRequest uploadPartRequest = UploadPartRequest.builder()
                .bucket(bucket)
                .key(key)
                .uploadId(multipartUploadId)
                .partNumber(partNumber)
                .build();

        final UploadPartPresignRequest uploadPartPresignRequest = UploadPartPresignRequest.builder()
                .signatureDuration(Duration.ofHours(1))
                .uploadPartRequest(uploadPartRequest)
                .build();

        final PresignedUploadPartRequest presignedUploadPartRequest = s3Presigner.presignUploadPart(uploadPartPresignRequest);
        final URL presignedUploadPartRequestURL = presignedUploadPartRequest.url();
        System.out.printf("UploadPart #%d URL: %s%n", partNumber, presignedUploadPartRequestURL);

        final HttpURLResponse presignedUploadPartRequest1Response = this.makeRequest(SdkHttpMethod.PUT, presignedUploadPartRequestURL, /* contentType */ "text/plain", partContentBytes);
        final String eTag = presignedUploadPartRequest1Response.getHeaders().get("ETag").get(0);
        System.out.printf("UploadPart #%d ETag: %s%n", partNumber, eTag);


        // Commit MPU

        System.out.printf("CompleteMultipartUploadRequest: bucket=%s key=%s multipart-id=%s%n", bucket, key, multipartUploadId);
        final CompleteMultipartUploadRequest completeMultipartUploadRequest = CompleteMultipartUploadRequest.builder()
                .bucket(bucket)
                .key(key)
                .uploadId(multipartUploadId)
                .build();

        final CompleteMultipartUploadPresignRequest completeMultipartUploadPresignRequest = CompleteMultipartUploadPresignRequest.builder()
                .signatureDuration(Duration.ofHours(1))
                .completeMultipartUploadRequest(completeMultipartUploadRequest)
                .build();

        final PresignedCompleteMultipartUploadRequest presignedCompleteMultipartUploadRequest = s3Presigner.presignCompleteMultipartUpload(completeMultipartUploadPresignRequest);
        final URL presignedCompleteMultipartUploadRequestURL = presignedCompleteMultipartUploadRequest.url();
        System.out.printf("CompleteMultipartUpload URL: %s%n", presignedCompleteMultipartUploadRequestURL);

        final Map<Integer, String> parts = Collections.singletonMap(partNumber, eTag);
        final String completeMultipartRequestPayload = this.buildCompleteMultipartRequestPayload(parts);

        System.out.println("Request payload: " + completeMultipartRequestPayload);

        final byte[] completeMultipartRequestPayloadBytes = completeMultipartRequestPayload.getBytes(StandardCharsets.UTF_8);
        final HttpURLResponse completeMultipartUploadResponse = this.makeRequest(SdkHttpMethod.POST, presignedCompleteMultipartUploadRequestURL, "application/xml", completeMultipartRequestPayloadBytes);

        System.out.println("Status Code: " + completeMultipartUploadResponse.getStatusCode());
        System.out.println("Response headers: " + completeMultipartUploadResponse.getHeaders());
        System.out.println("Response body: " + completeMultipartUploadResponse.getBody());
        // -->
    }

    private String buildCompleteMultipartRequestPayload(final Map<Integer, String> parts) throws XMLStreamException {
        final StringWriter stringWriter = new StringWriter();
        final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newFactory();
        final XMLStreamWriter xmlWriter = xmlOutputFactory.createXMLStreamWriter(stringWriter);

        xmlWriter.writeStartDocument();
        xmlWriter.writeStartElement("CompleteMultipartUpload");
        xmlWriter.writeDefaultNamespace("http://s3.amazonaws.com/doc/2006-03-01/");

        for (final Map.Entry<Integer, String> part : parts.entrySet()) {
            xmlWriter.writeStartElement("Part");

            xmlWriter.writeStartElement("ETag");
            xmlWriter.writeCharacters(part.getValue());
            xmlWriter.writeEndElement();

            xmlWriter.writeStartElement("PartNumber");
            xmlWriter.writeCharacters(part.getKey().toString());
            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        xmlWriter.writeEndElement();
        xmlWriter.writeEndDocument();

        

        return stringWriter.toString().replace("<?xml version='1.0' encoding='UTF-8'?>", "");
    }

    private String createLongString(final int length) {
        final char[] randomChars = new char[length];
        Arrays.fill(randomChars, 'z');

        return new String(randomChars);
    }

    private JsonNode fromXml(final String xml) throws JsonProcessingException {
        return this.xmlMapper.readTree(xml);
    }

    private HttpURLResponse makeRequest(final SdkHttpMethod httpMethod, final URL url, final String contentType, final byte[] data) throws IOException {
        System.out.println("Making request to: " + url.toString());

        final HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
        httpURLConnection.setRequestMethod(httpMethod.name());
        httpURLConnection.setDefaultUseCaches(false);

        if (contentType != null) {
            httpURLConnection.setRequestProperty("Content-Type", contentType);
        } else {
            httpURLConnection.setRequestProperty("Content-Type", "text/plain");
        }

        if (data != null) {
            httpURLConnection.setDoOutput(true);

            try (final InputStream requestPayloadInputStream = new ByteArrayInputStream(data); final OutputStream httpOutputStream = httpURLConnection.getOutputStream()) {
                IoUtils.copy(requestPayloadInputStream, httpOutputStream);
            }
        }

        return new HttpURLResponse(httpURLConnection);
    }

    private static class HttpURLResponse {

        private final int statusCode;
        private final Map<String, List<String>> headers;
        private final String body;

        public HttpURLResponse(final HttpURLConnection httpURLConnection) throws IOException {
            this.statusCode = httpURLConnection.getResponseCode();
            this.headers = httpURLConnection.getHeaderFields();

            if (this.statusCode == HttpURLConnection.HTTP_OK) {
                try (final InputStream in = httpURLConnection.getInputStream(); final ByteArrayOutputStream out = new ByteArrayOutputStream()) {
                IoUtils.copy(in, out);
                final byte[] bodyBytes = out.toByteArray();
                this.body = new String(bodyBytes, StandardCharsets.UTF_8);
                }
            } else {
                try (final InputStream in = httpURLConnection.getErrorStream(); final ByteArrayOutputStream out = new ByteArrayOutputStream()) {
                    IoUtils.copy(in, out);
                    final byte[] bodyBytes = out.toByteArray();
                    this.body = new String(bodyBytes, StandardCharsets.UTF_8);
                }
            }
        }

        public int getStatusCode() {
            return this.statusCode;
        }

        public Map<String, List<String>> getHeaders() {
            return this.headers;
        }

        public String getBody() {
            return this.body;
        }

    }
    
}